/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TestResult as PrismaTestResult,
  DiagnosticCenter as PrismaDiagnosticCenter,
  User as PrismaUser,
} from "@prisma/client";

export class TestResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TestResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.testResult.count(args);
  }

  async testResults(
    args: Prisma.TestResultFindManyArgs
  ): Promise<PrismaTestResult[]> {
    return this.prisma.testResult.findMany(args);
  }
  async testResult(
    args: Prisma.TestResultFindUniqueArgs
  ): Promise<PrismaTestResult | null> {
    return this.prisma.testResult.findUnique(args);
  }
  async createTestResult(
    args: Prisma.TestResultCreateArgs
  ): Promise<PrismaTestResult> {
    return this.prisma.testResult.create(args);
  }
  async updateTestResult(
    args: Prisma.TestResultUpdateArgs
  ): Promise<PrismaTestResult> {
    return this.prisma.testResult.update(args);
  }
  async deleteTestResult(
    args: Prisma.TestResultDeleteArgs
  ): Promise<PrismaTestResult> {
    return this.prisma.testResult.delete(args);
  }

  async getDiagnosticCenter(
    parentId: string
  ): Promise<PrismaDiagnosticCenter | null> {
    return this.prisma.testResult
      .findUnique({
        where: { id: parentId },
      })
      .diagnosticCenter();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.testResult
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
