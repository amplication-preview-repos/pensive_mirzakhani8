/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestResultService } from "../testResult.service";
import { TestResultCreateInput } from "./TestResultCreateInput";
import { TestResult } from "./TestResult";
import { TestResultFindManyArgs } from "./TestResultFindManyArgs";
import { TestResultWhereUniqueInput } from "./TestResultWhereUniqueInput";
import { TestResultUpdateInput } from "./TestResultUpdateInput";

export class TestResultControllerBase {
  constructor(protected readonly service: TestResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestResult })
  async createTestResult(
    @common.Body() data: TestResultCreateInput
  ): Promise<TestResult> {
    return await this.service.createTestResult({
      data: {
        ...data,

        diagnosticCenter: data.diagnosticCenter
          ? {
              connect: data.diagnosticCenter,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        testName: true,

        diagnosticCenter: {
          select: {
            id: true,
          },
        },

        publishedDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TestResult] })
  @ApiNestedQuery(TestResultFindManyArgs)
  async testResults(@common.Req() request: Request): Promise<TestResult[]> {
    const args = plainToClass(TestResultFindManyArgs, request.query);
    return this.service.testResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        testName: true,

        diagnosticCenter: {
          select: {
            id: true,
          },
        },

        publishedDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testResult(
    @common.Param() params: TestResultWhereUniqueInput
  ): Promise<TestResult | null> {
    const result = await this.service.testResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        testName: true,

        diagnosticCenter: {
          select: {
            id: true,
          },
        },

        publishedDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTestResult(
    @common.Param() params: TestResultWhereUniqueInput,
    @common.Body() data: TestResultUpdateInput
  ): Promise<TestResult | null> {
    try {
      return await this.service.updateTestResult({
        where: params,
        data: {
          ...data,

          diagnosticCenter: data.diagnosticCenter
            ? {
                connect: data.diagnosticCenter,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,
          testName: true,

          diagnosticCenter: {
            select: {
              id: true,
            },
          },

          publishedDate: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestResult(
    @common.Param() params: TestResultWhereUniqueInput
  ): Promise<TestResult | null> {
    try {
      return await this.service.deleteTestResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,
          testName: true,

          diagnosticCenter: {
            select: {
              id: true,
            },
          },

          publishedDate: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
