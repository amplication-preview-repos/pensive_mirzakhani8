/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TestResult } from "./TestResult";
import { TestResultCountArgs } from "./TestResultCountArgs";
import { TestResultFindManyArgs } from "./TestResultFindManyArgs";
import { TestResultFindUniqueArgs } from "./TestResultFindUniqueArgs";
import { CreateTestResultArgs } from "./CreateTestResultArgs";
import { UpdateTestResultArgs } from "./UpdateTestResultArgs";
import { DeleteTestResultArgs } from "./DeleteTestResultArgs";
import { DiagnosticCenter } from "../../diagnosticCenter/base/DiagnosticCenter";
import { User } from "../../user/base/User";
import { TestResultService } from "../testResult.service";
@graphql.Resolver(() => TestResult)
export class TestResultResolverBase {
  constructor(protected readonly service: TestResultService) {}

  async _testResultsMeta(
    @graphql.Args() args: TestResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TestResult])
  async testResults(
    @graphql.Args() args: TestResultFindManyArgs
  ): Promise<TestResult[]> {
    return this.service.testResults(args);
  }

  @graphql.Query(() => TestResult, { nullable: true })
  async testResult(
    @graphql.Args() args: TestResultFindUniqueArgs
  ): Promise<TestResult | null> {
    const result = await this.service.testResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TestResult)
  async createTestResult(
    @graphql.Args() args: CreateTestResultArgs
  ): Promise<TestResult> {
    return await this.service.createTestResult({
      ...args,
      data: {
        ...args.data,

        diagnosticCenter: args.data.diagnosticCenter
          ? {
              connect: args.data.diagnosticCenter,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TestResult)
  async updateTestResult(
    @graphql.Args() args: UpdateTestResultArgs
  ): Promise<TestResult | null> {
    try {
      return await this.service.updateTestResult({
        ...args,
        data: {
          ...args.data,

          diagnosticCenter: args.data.diagnosticCenter
            ? {
                connect: args.data.diagnosticCenter,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TestResult)
  async deleteTestResult(
    @graphql.Args() args: DeleteTestResultArgs
  ): Promise<TestResult | null> {
    try {
      return await this.service.deleteTestResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DiagnosticCenter, {
    nullable: true,
    name: "diagnosticCenter",
  })
  async getDiagnosticCenter(
    @graphql.Parent() parent: TestResult
  ): Promise<DiagnosticCenter | null> {
    const result = await this.service.getDiagnosticCenter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: TestResult): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
