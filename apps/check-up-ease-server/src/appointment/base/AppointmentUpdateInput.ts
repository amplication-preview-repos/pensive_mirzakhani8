/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsDate,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumAppointmentStatus } from "./EnumAppointmentStatus";
import { PaymentUpdateManyWithoutAppointmentsInput } from "./PaymentUpdateManyWithoutAppointmentsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { DiagnosticCenterWhereUniqueInput } from "../../diagnosticCenter/base/DiagnosticCenterWhereUniqueInput";

@InputType()
class AppointmentUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  service?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  appointmentDate?: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumAppointmentStatus,
  })
  @IsEnum(EnumAppointmentStatus)
  @IsOptional()
  @Field(() => EnumAppointmentStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => PaymentUpdateManyWithoutAppointmentsInput,
  })
  @ValidateNested()
  @Type(() => PaymentUpdateManyWithoutAppointmentsInput)
  @IsOptional()
  @Field(() => PaymentUpdateManyWithoutAppointmentsInput, {
    nullable: true,
  })
  payments?: PaymentUpdateManyWithoutAppointmentsInput;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => DiagnosticCenterWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DiagnosticCenterWhereUniqueInput)
  @IsOptional()
  @Field(() => DiagnosticCenterWhereUniqueInput, {
    nullable: true,
  })
  diagnosticCenter?: DiagnosticCenterWhereUniqueInput | null;
}

export { AppointmentUpdateInput as AppointmentUpdateInput };
